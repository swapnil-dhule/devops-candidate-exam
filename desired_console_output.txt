Started by user devops
Obtained Jenkinsfile from git https://github.com/swapnil-dhule/devops-candidate-exam
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/sd_pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/swapnil-dhule/devops-candidate-exam
 > git init /var/lib/jenkins/workspace/sd_pipeline # timeout=10
Fetching upstream changes from https://github.com/swapnil-dhule/devops-candidate-exam
 > git --version # timeout=10
 > git --version # 'git version 2.39.2'
 > git fetch --tags --force --progress -- https://github.com/swapnil-dhule/devops-candidate-exam +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/swapnil-dhule/devops-candidate-exam # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision f16f38f2993514d849b7c14fe7a4f3bb8266c450 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f f16f38f2993514d849b7c14fe7a4f3bb8266c450 # timeout=10
Commit message: "removed unneccasry blocks."
First time build. Skipping changelog.
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (TF Init)
[Pipeline] echo
Executing Terraform Init
[Pipeline] sh
+ terraform init

[0m[1mInitializing the backend...[0m
[0m[32m
Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.64.0...
- Installed hashicorp/aws v4.64.0 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (TF Validate)
[Pipeline] echo
Validating Terraform Code
[Pipeline] sh
+ terraform validate
[32m[1mSuccess![0m The configuration is valid.
[0m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (TF Plan)
[Pipeline] echo
Executing Terraform Plan
[Pipeline] sh
+ terraform plan
[0m[1mdata.aws_nat_gateway.nat: Reading...[0m[0m
[0m[1mdata.aws_iam_role.lambda: Reading...[0m[0m
[0m[1mdata.aws_vpc.vpc: Reading...[0m[0m
[0m[1mdata.aws_nat_gateway.nat: Read complete after 0s [id=nat-04bad8be564a37c70][0m
[0m[1mdata.aws_vpc.vpc: Read complete after 0s [id=vpc-00bf0d10a6a41600c][0m
[0m[1maws_subnet.private_subnet: Refreshing state... [id=subnet-054b93ec5df08d3fe][0m
[0m[1maws_route_table.private_route_table: Refreshing state... [id=rtb-006bdcc59fa63fa40][0m
[0m[1maws_route_table_association.private_route_table_association: Refreshing state... [id=rtbassoc-013eb0cbb9fd31244][0m
[0m[1mdata.aws_iam_role.lambda: Read complete after 1s [id=DevOps-Candidate-Lambda-Role][0m
[0m[1maws_lambda_function.lambda: Refreshing state... [id=lambda_function][0m

[0m[1m[32mNo changes.[0m[1m Your infrastructure matches the configuration.[0m

[0mTerraform has compared your real infrastructure against your configuration
and found no differences, so no changes are needed.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (TF Apply)
[Pipeline] echo
Executing Terraform Apply
[Pipeline] sh
+ terraform apply -auto-approve
[0m[1mdata.aws_iam_role.lambda: Reading...[0m[0m
[0m[1mdata.aws_vpc.vpc: Reading...[0m[0m
[0m[1mdata.aws_nat_gateway.nat: Reading...[0m[0m
[0m[1mdata.aws_nat_gateway.nat: Read complete after 0s [id=nat-04bad8be564a37c70][0m
[0m[1mdata.aws_vpc.vpc: Read complete after 0s [id=vpc-00bf0d10a6a41600c][0m
[0m[1maws_route_table.private_route_table: Refreshing state... [id=rtb-006bdcc59fa63fa40][0m
[0m[1maws_subnet.private_subnet: Refreshing state... [id=subnet-054b93ec5df08d3fe][0m
[0m[1maws_route_table_association.private_route_table_association: Refreshing state... [id=rtbassoc-013eb0cbb9fd31244][0m
[0m[1mdata.aws_iam_role.lambda: Read complete after 1s [id=DevOps-Candidate-Lambda-Role][0m
[0m[1maws_lambda_function.lambda: Refreshing state... [id=lambda_function][0m

[0m[1m[32mNo changes.[0m[1m Your infrastructure matches the configuration.[0m

[0mTerraform has compared your real infrastructure against your configuration
and found no differences, so no changes are needed.
[0m[1m[32m
Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
[0m
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Invoke Lambda)
[Pipeline] echo
Invoking your AWS Lambda
[Pipeline] sh
+ aws lambda invoke --function-name lambda_function --log-type Tail response.json
{
    "StatusCode": 200,
    "LogResult": "U1RBUlQgUmVxdWVzdElkOiAxY2RlOGRhOC1jMDNhLTQxOTQtYWQ5Yy1lOWE3ZTkzZjhkNjMgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiAxY2RlOGRhOC1jMDNhLTQxOTQtYWQ5Yy1lOWE3ZTkzZjhkNjMKUkVQT1JUIFJlcXVlc3RJZDogMWNkZThkYTgtYzAzYS00MTk0LWFkOWMtZTlhN2U5M2Y4ZDYzCUR1cmF0aW9uOiAxODU4LjMwIG1zCUJpbGxlZCBEdXJhdGlvbjogMTg1OSBtcwlNZW1vcnkgU2l6ZTogMTI4IE1CCU1heCBNZW1vcnkgVXNlZDogNDEgTUIJSW5pdCBEdXJhdGlvbjogMTE4LjA1IG1zCQo=",
    "ExecutedVersion": "$LATEST"
}
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
